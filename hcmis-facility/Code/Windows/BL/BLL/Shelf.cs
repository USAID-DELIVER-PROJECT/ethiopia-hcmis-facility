
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DAL;
using System.Data;

namespace BLL
{
	public class Shelf : _Shelf
	{
        private String[] ArrOfChars = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
		public Shelf()
		{

        }
        #region StaticProperties.
        public static DataTable AllShelves
        {
            get
            {
                Shelf s = new Shelf();
                s.LoadAllShelves();
                return s.DataTable;
            }
        }

        #endregion

        public DataTable GetShelves()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetShelfStore"));
            return this.DataTable;
        }

        public DataTable GetShelvesByCode(string shelfCode)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetShelfStore WHERE ShelfCode LIKE '{0}%'",shelfCode));
            return this.DataTable;
        }

        public DataTable GetShelvesByStore(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetShelfStore WHERE StoreID = {0}", storeId));
            return this.DataTable;
        }

        public void SavePalletLocationsInShelf(int rows, int cols)
        {
            // preserve the id of this shelf
            int id = this.ID;
            ShelfRowColumn src = new ShelfRowColumn();
            // check if the existing rows are null;
            if (this.IsColumnNull("Rows")) this.Rows = 0;
            if (this.IsColumnNull("Columns")) this.Columns = 0;
            this.Save();
            bool isColumnsChanged = (this.Columns != cols);
            bool isRowsChanged = (this.Rows != rows);
            
            PalletLocation pl = new PalletLocation();
            
            // Fix the row and columns if there are any new additions
            for (int i = this.Columns; i < cols; i++)
            {
                src.AddNew();
                src.ShelfID = id;
                src.Type = "Column";
                src.Index = i;
                src.Label = (i + 1).ToString();
                src.Save();
            }
            for (int i = this.Rows; i < rows; i++)
            {

                src.AddNew();
                src.ShelfID = id;
                src.Type = "Row";
                src.Index = i;
                src.Label = ArrOfChars[i];
                src.Save();
            }
            
            if (rows > this.Rows)
            {
                for (int i = this.Rows; i < rows; i++)
                {
                    for (int j = 0; j < cols; j++)
                    {
                        pl.AddNew();
                        pl.Column = j;
                        pl.Row = i;
                        pl.StorageTypeID = this.ShelfStorageType;
                        pl.ShelfID = id;
                        pl.LoadLabel();
                        pl.IsEnabled = true;
                        pl.Save();
                    }
                }
            }
            else if (rows < this.Rows)
            {
                this.LoadFromRawSql(String.Format("delete from PalletLocation where ShelfID = {0} and [Row] >= {1}",id,rows));
                this.LoadFromRawSql(String.Format("delete from ShelfRowColumn where ShelfID = {0} and [Index] >= {1} and Type = 'Row'", id, rows));
            }
            // if we have lost it for //rows < this.Rows
            this.LoadByPrimaryKey(id);

            if (cols > this.Columns)
            {
                

                for (int i = this.Columns; i < cols; i++)
                {
                    
                    for (int j = 0; j < this.Rows; j++)
                    {
                       
                        {
                            pl.AddNew();
                            pl.Column = i;
                            pl.Row = j;
                            pl.StorageTypeID = this.ShelfStorageType;
                            pl.ShelfID = id;
                            pl.LoadLabel();
                            pl.IsEnabled = true;
                            pl.Save();
                        }
                    }
                }
            }
            else if (cols < this.Columns)
            {
                this.LoadFromRawSql(String.Format("delete from PalletLocation where ShelfID = {0} and [Column] >= {1}", id, cols));
                this.LoadFromRawSql(String.Format("delete from ShelfRowColumn where ShelfID = {0} and [Index] >= {1} and Type = 'Column'", id, cols));
            }
            this.FlushData();
            this.LoadByPrimaryKey(id);
            this.Rows = rows;
            this.Columns = cols;
            this.Save();

            if (isColumnsChanged)
            {
                FixLengthOfPalletLocations();
            }
            if (isRowsChanged)
            {
                FixHeightOfPalletLocations();
            }
            // make the approprait entry in the pick list locations
            if (this.ShelfStorageType.ToString() == StorageType.PickFace)
            {
                PickFace.FixPickFaceEntries();
            }
        }

        public void SaveDimentions(double width, double height, double length)
        {
            if (height != this.Height)
            {
                this.Height = height;
                this.Save();
                this.FixHeightOfPalletLocations();
            }
            if (length != this.Length)
            {
                this.Length = length;
                this.Save();
                FixLengthOfPalletLocations();
            }

            if (width != this.Width)
            {
                this.Width = width;
                this.Save();
                int id = this.ID;
                this.LoadFromRawSql(String.Format("Update PalletLocation set Width = {1} where ShelfID = {0}",id,width));
                this.LoadByPrimaryKey(id);
            }
        }

        private void FixHeightOfPalletLocations()
        {
            int id = this.ID;
            if (this.Rows > 0)
            {
                double palletHeight = Math.Round(this.Height / this.Rows, 2);
                this.LoadFromRawSql(String.Format("update PalletLocation set Height = {1} where ShelfID = {0}", id, palletHeight));
                this.LoadFromRawSql(String.Format("update ShelfRowColumn set Dimension = {1} where ShelfID = {0} and Type = 'Row'", id, palletHeight));
                this.LoadByPrimaryKey(id);
            }
        }
        private void FixLengthOfPalletLocations()
        {
            int id = this.ID;
            if (this.Columns > 0)
            {
                double palletLength = Math.Round(this.Length / this.Columns, 2);
                this.LoadFromRawSql(String.Format("update PalletLocation set Length = {1} where ShelfID = {0}", id, palletLength));
                this.LoadFromRawSql(String.Format("update ShelfRowColumn set Dimension = {1} where ShelfID = {0} and Type = 'Column'", id, palletLength));
                this.LoadByPrimaryKey(id);
            }
        }


        public void SaveShelfStorageType(int storageType)
        {
            if (this.IsColumnNull("ShelfStorageType") || this.ShelfStorageType != storageType)
            {
                // make the modification to all simmilar storage types of pallet Locations

                PalletLocation pl = new PalletLocation();
                if (this.IsColumnNull("ShelfStorageType"))
                {
                    pl.ChangeStorageTypesOf(this.ID, storageType);
                }
                else
                {
                    pl.ChangeStorageTypesOf(this.ID, this.ShelfStorageType, storageType);
                }
            }
            this.ShelfStorageType = storageType;
            this.Save();
        }

        public void LoadAllPickFaceShelves()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("select * from Shelf where ID in (select distinct ShelfID from PalletLocation where StorageTypeID = {0})",StorageType.PickFace));
        }

        public void LoadShelvesByStorageType(string StorageType)
        {
            
            this.LoadFromRawSql(String.Format("select s.*, (st.Prefix + ' - ' + s.ShelfCode) as SName  from Shelf s join StorageType st on s.ShelfStorageType = st.ID where ShelfStorageType = {0} ",StorageType));
        }

        public void LoadForMergedView()
        {
            this.LoadFromRawSql(String.Format("select *,pl.ID PalletLocationID, pl.Label PalletLocationLabel, pl.StorageTypeID STI , sr.Label RowLabel, sc.Label ColumnLabel from Shelf s join PalletLocation pl on s.ID = pl.ShelfID join ShelfRowColumn sr on sr.ShelfID = pl.ShelfID and sr.[Index] = pl.Row and sr.Type= 'Row' join ShelfRowColumn sc on sc.ShelfID = pl.ShelfID and sc.[Index] = pl.[Column] and sc.Type = 'Column' order by pl.ShelfID,  pl.[Column],pl.[Row]"));
            
        }

        public void LoadForMergedView(string storageType)
        {
            this.LoadFromRawSql(String.Format("select *, pl.ID PalletLocationID, pl.Label PalletLocationLabel, pl.StorageTypeID STI , sr.Label RowLabel, sc.Label ColumnLabel from Shelf s join PalletLocation pl on s.ID = pl.ShelfID join ShelfRowColumn sr on sr.ShelfID = pl.ShelfID and sr.[Index] = pl.Row and sr.Type= 'Row' join ShelfRowColumn sc on sc.ShelfID = pl.ShelfID and sc.[Index] = pl.[Column] and sc.Type = 'Column' where s.ShelfStorageType = {0} order by pl.ShelfID, pl.[Column], pl.[Row]", storageType));
        }

        public void LoadForMergedViewByShelfID(int shelfID)
        {
            this.LoadFromRawSql(String.Format("select *, pl.ID PalletLocationID, pl.Label PalletLocationLabel, pl.StorageTypeID STI , sr.Label RowLabel, sc.Label ColumnLabel from Shelf s join PalletLocation pl on s.ID = pl.ShelfID join ShelfRowColumn sr on sr.ShelfID = pl.ShelfID and sr.[Index] = pl.Row and sr.Type= 'Row' join ShelfRowColumn sc on sc.ShelfID = pl.ShelfID and sc.[Index] = pl.[Column] and sc.Type = 'Column' where s.ID = {0} order by pl.ShelfID,  pl.[Column], pl.[Row]", shelfID));

        }// the past three functions basically return the same kind of result and should be treated as view

        public void LoadAllShelves()
        {
            this.LoadFromRawSql("select *, st.Prefix + ' ' + s.ShelfCode as ShelfLabel  from Shelf s join StorageType st on s.ShelfStorageType = st.ID");
        }



        
    }
}
