
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DAL;
using System.Data;
namespace BLL
{
    /// <summary>
    /// This class represents each pallet locations that exist on a shelf or a rack
    /// This class is only applicable on HCMIS HUB Edition
    /// 
    /// </summary>
	public class PalletLocation : _PalletLocation
	{

		public PalletLocation()
		{
		
		}

        /// <summary>
        /// Returns the full location name including the storage type and the prefix  of the shelf to identify the pallet location uniquely.
        /// </summary>
        public String FullName
        {
            get {

                Shelf slf = new Shelf();
                slf.LoadByPrimaryKey(this.ShelfID);
                StorageType st = new StorageType();
                st.LoadByPrimaryKey(slf.ShelfStorageType);
                return st.Prefix + " " + this.Label;
            }
        }
        /// <summary>
        /// Loads all the pallet locations on a shelf sepcified by the shelf ID
        /// </summary>
        /// <param name="shelfID"></param>
        public void LoadPalletLocationsByShelf(int shelfID)
        {
            
            this.FlushData();
            this.LoadFromRawSql(String.Format("select * from PalletLocation where ShelfID = {0}",shelfID));
        }

        public void LoadPalletLocationsByShelf(int shelfID, string storageType)
        {
            this.FlushData();
            String query = String.Format("select * from PalletLocation where ShelfID = {0} and StorageTypeID = {1}", shelfID, storageType);
            this.LoadFromRawSql(query);
        }

        public void LoadPalletLocationFor(string shelfID, string column, string row)
        {
            string query = String.Format("select * from PalletLocation where ShelfID = {0} and [Column] = {1} and [Row] = {2}", shelfID, column, row);
            this.LoadFromRawSql( query );
        }

       
        internal void LoadLabel()
        {
            Shelf shelf = new Shelf();
            shelf.LoadByPrimaryKey(this.ShelfID);
            this.Label = shelf.ShelfCode;
            
            ShelfRowColumn src = new ShelfRowColumn();
            src.LoadColumnsForShelf(this.ShelfID,this.Column);
            this.Label = this.Label;
            this.Label += "-" + src.Label;

            src.LoadRowForShelf(this.ShelfID, this.Row);
            this.Label += "-" + src.Label;

        }
        
        internal void ChangeStorageTypesOf(int shelfID, int from, int to)
        {
            
            
            this.LoadFromRawSql(String.Format("update PalletLocation set StorageTypeID = {2} where ShelfID = {0} and StorageTypeID = {1}", shelfID ,from, to));
            // correctly removes entries from PickFace and PreferedItemLocation!            
            PickFace.FixPickFaceEntries();
        }
        internal void ChangeStorageTypesOf(int shelfID, int to)
        {

            
            this.LoadFromRawSql(String.Format("update PalletLocation set StorageTypeID = {1} where ShelfID = {0} ", shelfID, to));
            // correctly removes entries from PickFace and PreferedItemLocation!
            PickFace.FixPickFaceEntries();
        }



        public void LoadFixedStoragePallets(String selectedRackID)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("select * from PalletLocation where ShelfID = {0} and StorageTypeID <> {1} and StorageTypeID <> {2}",selectedRackID,StorageType.BulkStore,StorageType.PickFace));
        }



        public static DataTable GetAllFree(string StorageType)
        {
            string query = String.Format("select (st.Prefix + ' ' + pl.Label) as PalletLocationName  , * from PalletLocation pl join StorageType st on pl.StorageTypeID = st.ID where StorageTypeID = {0} and pl.PalletID is null",StorageType);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

        public void LoadLocationForPallet(int pallet)
        {
            this.LoadFromRawSql(String.Format("select * from PalletLocation where PalletID = {0}",pallet));
        }

        public static DataTable GetAllFreeFor(int itemID)
        {
            string query = String.Format("select (st.Prefix + ' ' + pl.Label) as PalletLocationName  , * from PalletLocation pl join StorageType st on pl.StorageTypeID = st.ID join ItemPrefferedLocation ipl on ipl.PalletLocationID = pl.ID where ipl.ItemID = {0} and pl.PalletID is null", itemID);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            if (pl.RowCount == 0)
            {
                Items itm = new Items();
                itm.LoadByPrimaryKey(itemID);
                return PalletLocation.GetAllFree(itm.StorageTypeID.ToString());
            }
            return pl.DataTable;
        }

        

        public static DataTable GetAllFreeNonBulk()
        {
            string query = String.Format("select (st.Prefix + ' ' + pl.Label) as PalletLocationName  , * from PalletLocation pl join StorageType st on pl.StorageTypeID = st.ID where StorageTypeID <> {0} and StorageTypeID <> {1} and pl.PalletID is null", StorageType.BulkStore,StorageType.PickFace);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

        public static void PopulatePalletLocationFor(DataTable dtbl)
        {
            int pallet = 0;
            PalletLocation pl = new PalletLocation();
            dtbl.Columns.Add("PalletLocation");
            foreach (DataRow dr in dtbl.Rows)
            {
                pallet = Convert.ToInt32(dr["PalletID"]);
                pl.LoadLocationForPallet(pallet);
                if (pl.RowCount > 0)
                {
                    dr["PalletLocation"] = pl.FullName;
                }
                
            }
        }

        public static DataTable GetAll()
        {
            PalletLocation pl = new PalletLocation();
            String query = String.Format("select (st.Prefix + ' ' + pl.Label) as PalletLocationName  , * from PalletLocation pl join StorageType st on pl.StorageTypeID = st.ID");
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }


        public DataTable GetUnConfirmedReceives()
        {
            string query = "select  distinct(RefNo),  EurDate from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID where PalletID in (select PalletID from PalletLocation where PalletID is not null and Confirmed <> 1)";
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetDetailsOfReferenceNumber(string reference)
        {
            string query = String.Format("select distinct RefNo, rd.ItemID, p.PalletNo,  rp.PalletID, vw.FullItemName , rd.ExpDate , pl.ID PalletLocationID  from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID join vwGetAllItems vw  on vw.ID = rd.ItemID join Pallet p on p.ID = rp.PalletID join PalletLocation pl on pl.PalletID = p.ID where rp.PalletID in (select pll.PalletID from PalletLocation pll where pll.PalletID is not null and pll.Confirmed <> 1 and rd.RefNo = '{0}')", reference);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }



        public void ConfirmAllReceived(string reference)
        {
            string query = String.Format("update PalletLocation set Confirmed = 1 where ID in ( select pl.ID from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID join PalletLocation pl on pl.PalletID = rp.PalletID where  rd.RefNo = '{0}')", reference);
            this.LoadFromRawSql(query);
        }
    }
}
