
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DAL;
using System.Data;
namespace BLL
{
	public class PickFace : _PickFace
	{
		public PickFace()
		{
		    
		}

        public void LoadByPalletLocation(int palletLocationID)
        {
            String query = String.Format("select * from PickFace where PalletLocationID = {0}",palletLocationID);
            this.LoadFromRawSql(query);
        }

        public void LoadPalletLocationsWithoutEntries()
        {
            String query = String.Format("select * from PalletLocation where ID not in (Select PalletLocationID from PickFace) and StorageTypeID = {0}",StorageType.PickFace);
            this.LoadFromRawSql(query);
        }

        internal void DeleteNonPickfaceEntries()
        {
            String query = String.Format("delete from PickFace where PalletLocationID in (Select ID from PalletLocation where StorageTypeID <> {0})", StorageType.PickFace);
            this.LoadFromRawSql(query);
        }

        public static void FixPickFaceEntries()
        {
            PickFace pf = new PickFace();
            pf.LoadPalletLocationsWithoutEntries();
            PickFace pfl = new PickFace();
            while (!pf.EOF)
            {
                pfl.AddNew();
                pfl.PalletLocationID = pf.ID;
                pfl.Save();
                pf.MoveNext();
            }
            pf.DeleteNonPickfaceEntries();

        }

        public DataTable GetPalletLocationsForItem(int itemId)
        {
            String query = String.Format("select pl.ID, pl.Label from PickFace pf join PalletLocation pl on pl.ID = pf.PalletLocationID where pf.DesignatedItem = {0} or DesignatedItem is null order by pl.Label",itemId);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public string PalletLocationForItem(int itemId)
        {
            this.FlushData();
            String query = String.Format("select pl.ID from PickFace pf join PalletLocation pl on pl.ID = pf.PalletLocationID where pf.DesignatedItem = {0}", itemId);
            this.LoadFromRawSql(query);
            return (RowCount > 0)? this.ID.ToString(): "";
        }

        public void SavePickFaceLocation(int itemId, int palletLocation)
        {
            // check if there is entry representing this item;
            
            this.GetPalletLocationsForItem(itemId);
            if (this.RowCount > 0)
            {
                this.LoadFromRawSql(String.Format("update PickFace set DesignatedItem = null where DesignatedItem = {0}",itemId));
            }
            this.LoadByPalletLocation(palletLocation);
            if (this.IsColumnNull("DesignatedItem"))
            {
                this.DesignatedItem = itemId;
                this.Save();
            }
        }
    }
}
