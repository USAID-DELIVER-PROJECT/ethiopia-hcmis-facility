
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PickList : SqlClientEntity
	{
		public _PickList()
		{
			this.QuerySource = "PickList";
			this.MappingName = "PickList";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PickListLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PickListLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PickType
			{
				get
				{
					return new SqlParameter("@PickType", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter IssuedDate
			{
				get
				{
					return new SqlParameter("@IssuedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsConfirmed
			{
				get
				{
					return new SqlParameter("@IsConfirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.Text, 2147483647);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string OrderID = "OrderID";
            public const string PickType = "PickType";
            public const string IssuedDate = "IssuedDate";
            public const string IsConfirmed = "IsConfirmed";
            public const string Remark = "Remark";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PickList.PropertyNames.ID;
					ht[OrderID] = _PickList.PropertyNames.OrderID;
					ht[PickType] = _PickList.PropertyNames.PickType;
					ht[IssuedDate] = _PickList.PropertyNames.IssuedDate;
					ht[IsConfirmed] = _PickList.PropertyNames.IsConfirmed;
					ht[Remark] = _PickList.PropertyNames.Remark;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string OrderID = "OrderID";
            public const string PickType = "PickType";
            public const string IssuedDate = "IssuedDate";
            public const string IsConfirmed = "IsConfirmed";
            public const string Remark = "Remark";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PickList.ColumnNames.ID;
					ht[OrderID] = _PickList.ColumnNames.OrderID;
					ht[PickType] = _PickList.ColumnNames.PickType;
					ht[IssuedDate] = _PickList.ColumnNames.IssuedDate;
					ht[IsConfirmed] = _PickList.ColumnNames.IsConfirmed;
					ht[Remark] = _PickList.ColumnNames.Remark;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string OrderID = "s_OrderID";
            public const string PickType = "s_PickType";
            public const string IssuedDate = "s_IssuedDate";
            public const string IsConfirmed = "s_IsConfirmed";
            public const string Remark = "s_Remark";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual string PickType
	    {
			get
	        {
				return base.Getstring(ColumnNames.PickType);
			}
			set
	        {
				base.Setstring(ColumnNames.PickType, value);
			}
		}

		public virtual DateTime IssuedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.IssuedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.IssuedDate, value);
			}
		}

		public virtual bool IsConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsConfirmed, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_PickType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickType) ? string.Empty : base.GetstringAsString(ColumnNames.PickType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickType);
				else
					this.PickType = base.SetstringAsString(ColumnNames.PickType, value);
			}
		}

		public virtual string s_IssuedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IssuedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.IssuedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IssuedDate);
				else
					this.IssuedDate = base.SetDateTimeAsString(ColumnNames.IssuedDate, value);
			}
		}

		public virtual string s_IsConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsConfirmed);
				else
					this.IsConfirmed = base.SetboolAsString(ColumnNames.IsConfirmed, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickType, Parameters.PickType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IssuedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IssuedDate, Parameters.IssuedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter PickType
		    {
				get
		        {
					if(_PickType_W == null)
	        	    {
						_PickType_W = TearOff.PickType;
					}
					return _PickType_W;
				}
			}

			public WhereParameter IssuedDate
		    {
				get
		        {
					if(_IssuedDate_W == null)
	        	    {
						_IssuedDate_W = TearOff.IssuedDate;
					}
					return _IssuedDate_W;
				}
			}

			public WhereParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _OrderID_W = null;
			private WhereParameter _PickType_W = null;
			private WhereParameter _IssuedDate_W = null;
			private WhereParameter _IsConfirmed_W = null;
			private WhereParameter _Remark_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_OrderID_W = null;
				_PickType_W = null;
				_IssuedDate_W = null;
				_IsConfirmed_W = null;
				_Remark_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickType, Parameters.PickType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IssuedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssuedDate, Parameters.IssuedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter PickType
		    {
				get
		        {
					if(_PickType_W == null)
	        	    {
						_PickType_W = TearOff.PickType;
					}
					return _PickType_W;
				}
			}

			public AggregateParameter IssuedDate
		    {
				get
		        {
					if(_IssuedDate_W == null)
	        	    {
						_IssuedDate_W = TearOff.IssuedDate;
					}
					return _IssuedDate_W;
				}
			}

			public AggregateParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _PickType_W = null;
			private AggregateParameter _IssuedDate_W = null;
			private AggregateParameter _IsConfirmed_W = null;
			private AggregateParameter _Remark_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_OrderID_W = null;
				_PickType_W = null;
				_IssuedDate_W = null;
				_IsConfirmed_W = null;
				_Remark_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickType);
			p.SourceColumn = ColumnNames.PickType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IssuedDate);
			p.SourceColumn = ColumnNames.IssuedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsConfirmed);
			p.SourceColumn = ColumnNames.IsConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
