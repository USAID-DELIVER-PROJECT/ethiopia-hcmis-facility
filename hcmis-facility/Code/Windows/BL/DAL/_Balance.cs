
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _Balance : SqlClientEntity
    {
        public _Balance()
        {
            this.QuerySource = "Balance";
            this.MappingName = "Balance";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BalanceLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BalanceLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ItemID
            {
                get
                {
                    return new SqlParameter("@ItemID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter StoreId
            {
                get
                {
                    return new SqlParameter("@StoreId", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter LastDate
            {
                get
                {
                    return new SqlParameter("@LastDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter SOH
            {
                get
                {
                    return new SqlParameter("@SOH", SqlDbType.BigInt, 0);
                }
            }

            public static SqlParameter PhysicalCount
            {
                get
                {
                    return new SqlParameter("@PhysicalCount", SqlDbType.BigInt, 0);
                }
            }

            public static SqlParameter Month
            {
                get
                {
                    return new SqlParameter("@Month", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Year
            {
                get
                {
                    return new SqlParameter("@Year", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter AMC
            {
                get
                {
                    return new SqlParameter("@AMC", SqlDbType.BigInt, 0);
                }
            }

            public static SqlParameter SOHCost
            {
                get
                {
                    return new SqlParameter("@SOHCost", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter UnitID
            {
                get
                {
                    return new SqlParameter("@UnitID", SqlDbType.Int, 0);
                }
            }
        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string StoreId = "StoreId";
            public const string LastDate = "LastDate";
            public const string SOH = "SOH";
            public const string PhysicalCount = "PhysicalCount";
            public const string Month = "Month";
            public const string Year = "Year";
            public const string AMC = "AMC";
            public const string SOHCost = "SOHCost";
            public const string UnitID = "UnitID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Balance.PropertyNames.ID;
                    ht[ItemID] = _Balance.PropertyNames.ItemID;
                    ht[StoreId] = _Balance.PropertyNames.StoreId;
                    ht[LastDate] = _Balance.PropertyNames.LastDate;
                    ht[SOH] = _Balance.PropertyNames.SOH;
                    ht[PhysicalCount] = _Balance.PropertyNames.PhysicalCount;
                    ht[Month] = _Balance.PropertyNames.Month;
                    ht[Year] = _Balance.PropertyNames.Year;
                    ht[AMC] = _Balance.PropertyNames.AMC;
                    ht[SOHCost] = _Balance.PropertyNames.SOHCost;
                    ht[UnitID] = _Balance.PropertyNames.UnitID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string StoreId = "StoreId";
            public const string LastDate = "LastDate";
            public const string SOH = "SOH";
            public const string PhysicalCount = "PhysicalCount";
            public const string Month = "Month";
            public const string Year = "Year";
            public const string AMC = "AMC";
            public const string SOHCost = "SOHCost";
            public const string UnitID = "UnitID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Balance.ColumnNames.ID;
                    ht[ItemID] = _Balance.ColumnNames.ItemID;
                    ht[StoreId] = _Balance.ColumnNames.StoreId;
                    ht[LastDate] = _Balance.ColumnNames.LastDate;
                    ht[SOH] = _Balance.ColumnNames.SOH;
                    ht[PhysicalCount] = _Balance.ColumnNames.PhysicalCount;
                    ht[Month] = _Balance.ColumnNames.Month;
                    ht[Year] = _Balance.ColumnNames.Year;
                    ht[AMC] = _Balance.ColumnNames.AMC;
                    ht[SOHCost] = _Balance.ColumnNames.SOHCost;
                    ht[UnitID] = _Balance.ColumnNames.UnitID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string ItemID = "s_ItemID";
            public const string StoreId = "s_StoreId";
            public const string LastDate = "s_LastDate";
            public const string SOH = "s_SOH";
            public const string PhysicalCount = "s_PhysicalCount";
            public const string Month = "s_Month";
            public const string Year = "s_Year";
            public const string AMC = "s_AMC";
            public const string SOHCost = "s_SOHCost";
            public const string UnitID = "s_UnitID";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int ItemID
        {
            get
            {
                return base.Getint(ColumnNames.ItemID);
            }
            set
            {
                base.Setint(ColumnNames.ItemID, value);
            }
        }

        public virtual int StoreId
        {
            get
            {
                return base.Getint(ColumnNames.StoreId);
            }
            set
            {
                base.Setint(ColumnNames.StoreId, value);
            }
        }

        public virtual DateTime LastDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.LastDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.LastDate, value);
            }
        }

        public virtual long SOH
        {
            get
            {
                return base.Getlong(ColumnNames.SOH);
            }
            set
            {
                base.Setlong(ColumnNames.SOH, value);
            }
        }

        public virtual long PhysicalCount
        {
            get
            {
                return base.Getlong(ColumnNames.PhysicalCount);
            }
            set
            {
                base.Setlong(ColumnNames.PhysicalCount, value);
            }
        }

        public virtual int Month
        {
            get
            {
                return base.Getint(ColumnNames.Month);
            }
            set
            {
                base.Setint(ColumnNames.Month, value);
            }
        }

        public virtual int Year
        {
            get
            {
                return base.Getint(ColumnNames.Year);
            }
            set
            {
                base.Setint(ColumnNames.Year, value);
            }
        }

        public virtual long AMC
        {
            get
            {
                return base.Getlong(ColumnNames.AMC);
            }
            set
            {
                base.Setlong(ColumnNames.AMC, value);
            }
        }

        public virtual double SOHCost
        {
            get
            {
                return base.Getdouble(ColumnNames.SOHCost);
            }
            set
            {
                base.Setdouble(ColumnNames.SOHCost, value);
            }
        }

        public virtual int UnitID
        {
            get
            {
                return base.Getint(ColumnNames.UnitID);
            }
            set
            {
                base.Setint(ColumnNames.UnitID, value);
            }
        }




        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_ItemID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ItemID);
                else
                    this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
            }
        }

        public virtual string s_StoreId
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StoreId) ? string.Empty : base.GetintAsString(ColumnNames.StoreId);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StoreId);
                else
                    this.StoreId = base.SetintAsString(ColumnNames.StoreId, value);
            }
        }

        public virtual string s_LastDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LastDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LastDate);
                else
                    this.LastDate = base.SetDateTimeAsString(ColumnNames.LastDate, value);
            }
        }

        public virtual string s_SOH
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SOH) ? string.Empty : base.GetlongAsString(ColumnNames.SOH);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SOH);
                else
                    this.SOH = base.SetlongAsString(ColumnNames.SOH, value);
            }
        }

        public virtual string s_PhysicalCount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PhysicalCount) ? string.Empty : base.GetlongAsString(ColumnNames.PhysicalCount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PhysicalCount);
                else
                    this.PhysicalCount = base.SetlongAsString(ColumnNames.PhysicalCount, value);
            }
        }

        public virtual string s_Month
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Month) ? string.Empty : base.GetintAsString(ColumnNames.Month);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Month);
                else
                    this.Month = base.SetintAsString(ColumnNames.Month, value);
            }
        }

        public virtual string s_Year
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Year) ? string.Empty : base.GetintAsString(ColumnNames.Year);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Year);
                else
                    this.Year = base.SetintAsString(ColumnNames.Year, value);
            }
        }

        public virtual string s_AMC
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AMC) ? string.Empty : base.GetlongAsString(ColumnNames.AMC);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AMC);
                else
                    this.AMC = base.SetlongAsString(ColumnNames.AMC, value);
            }
        }

        public virtual string s_SOHCost
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SOHCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.SOHCost);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SOHCost);
                else
                    this.SOHCost = base.SetdoubleAsString(ColumnNames.SOHCost, value);
            }
        }

        public virtual string s_UnitID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UnitID);
                else
                    this.ID = base.SetintAsString(ColumnNames.UnitID, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ItemID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StoreId
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StoreId, Parameters.StoreId);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LastDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LastDate, Parameters.LastDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SOH
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SOH, Parameters.SOH);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PhysicalCount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PhysicalCount, Parameters.PhysicalCount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Month
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Month, Parameters.Month);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Year
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Year, Parameters.Year);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AMC
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AMC, Parameters.AMC);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SOHCost
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SOHCost, Parameters.SOHCost);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UnitID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public WhereParameter StoreId
            {
                get
                {
                    if (_StoreId_W == null)
                    {
                        _StoreId_W = TearOff.StoreId;
                    }
                    return _StoreId_W;
                }
            }

            public WhereParameter LastDate
            {
                get
                {
                    if (_LastDate_W == null)
                    {
                        _LastDate_W = TearOff.LastDate;
                    }
                    return _LastDate_W;
                }
            }

            public WhereParameter SOH
            {
                get
                {
                    if (_SOH_W == null)
                    {
                        _SOH_W = TearOff.SOH;
                    }
                    return _SOH_W;
                }
            }

            public WhereParameter PhysicalCount
            {
                get
                {
                    if (_PhysicalCount_W == null)
                    {
                        _PhysicalCount_W = TearOff.PhysicalCount;
                    }
                    return _PhysicalCount_W;
                }
            }

            public WhereParameter Month
            {
                get
                {
                    if (_Month_W == null)
                    {
                        _Month_W = TearOff.Month;
                    }
                    return _Month_W;
                }
            }

            public WhereParameter Year
            {
                get
                {
                    if (_Year_W == null)
                    {
                        _Year_W = TearOff.Year;
                    }
                    return _Year_W;
                }
            }

            public WhereParameter AMC
            {
                get
                {
                    if (_AMC_W == null)
                    {
                        _AMC_W = TearOff.AMC;
                    }
                    return _AMC_W;
                }
            }

            public WhereParameter SOHCost
            {
                get
                {
                    if (_SOHCost_W == null)
                    {
                        _SOHCost_W = TearOff.SOHCost;
                    }
                    return _SOHCost_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _ItemID_W = null;
            private WhereParameter _StoreId_W = null;
            private WhereParameter _LastDate_W = null;
            private WhereParameter _SOH_W = null;
            private WhereParameter _PhysicalCount_W = null;
            private WhereParameter _Month_W = null;
            private WhereParameter _Year_W = null;
            private WhereParameter _AMC_W = null;
            private WhereParameter _SOHCost_W = null;
            private WhereParameter _UnitID_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _ItemID_W = null;
                _StoreId_W = null;
                _LastDate_W = null;
                _SOH_W = null;
                _PhysicalCount_W = null;
                _Month_W = null;
                _Year_W = null;
                _AMC_W = null;
                _SOHCost_W = null;
                _UnitID_W = null;
                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ItemID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StoreId
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreId, Parameters.StoreId);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LastDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastDate, Parameters.LastDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SOH
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SOH, Parameters.SOH);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PhysicalCount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalCount, Parameters.PhysicalCount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Month
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Month, Parameters.Month);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Year
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Year, Parameters.Year);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AMC
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AMC, Parameters.AMC);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SOHCost
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SOHCost, Parameters.SOHCost);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public AggregateParameter StoreId
            {
                get
                {
                    if (_StoreId_W == null)
                    {
                        _StoreId_W = TearOff.StoreId;
                    }
                    return _StoreId_W;
                }
            }

            public AggregateParameter LastDate
            {
                get
                {
                    if (_LastDate_W == null)
                    {
                        _LastDate_W = TearOff.LastDate;
                    }
                    return _LastDate_W;
                }
            }

            public AggregateParameter SOH
            {
                get
                {
                    if (_SOH_W == null)
                    {
                        _SOH_W = TearOff.SOH;
                    }
                    return _SOH_W;
                }
            }

            public AggregateParameter PhysicalCount
            {
                get
                {
                    if (_PhysicalCount_W == null)
                    {
                        _PhysicalCount_W = TearOff.PhysicalCount;
                    }
                    return _PhysicalCount_W;
                }
            }

            public AggregateParameter Month
            {
                get
                {
                    if (_Month_W == null)
                    {
                        _Month_W = TearOff.Month;
                    }
                    return _Month_W;
                }
            }

            public AggregateParameter Year
            {
                get
                {
                    if (_Year_W == null)
                    {
                        _Year_W = TearOff.Year;
                    }
                    return _Year_W;
                }
            }

            public AggregateParameter AMC
            {
                get
                {
                    if (_AMC_W == null)
                    {
                        _AMC_W = TearOff.AMC;
                    }
                    return _AMC_W;
                }
            }

            public AggregateParameter SOHCost
            {
                get
                {
                    if (_SOHCost_W == null)
                    {
                        _SOHCost_W = TearOff.SOHCost;
                    }
                    return _SOHCost_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _ItemID_W = null;
            private AggregateParameter _StoreId_W = null;
            private AggregateParameter _LastDate_W = null;
            private AggregateParameter _SOH_W = null;
            private AggregateParameter _PhysicalCount_W = null;
            private AggregateParameter _Month_W = null;
            private AggregateParameter _Year_W = null;
            private AggregateParameter _AMC_W = null;
            private AggregateParameter _SOHCost_W = null;
            private AggregateParameter _UnitID_W = null;
            public void AggregateClauseReset()
            {
                _ID_W = null;
                _ItemID_W = null;
                _StoreId_W = null;
                _LastDate_W = null;
                _SOH_W = null;
                _PhysicalCount_W = null;
                _Month_W = null;
                _Year_W = null;
                _AMC_W = null;
                _SOHCost_W = null;
                _UnitID_W = null;
                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BalanceInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BalanceUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BalanceDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ItemID);
            p.SourceColumn = ColumnNames.ItemID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StoreId);
            p.SourceColumn = ColumnNames.StoreId;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LastDate);
            p.SourceColumn = ColumnNames.LastDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SOH);
            p.SourceColumn = ColumnNames.SOH;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PhysicalCount);
            p.SourceColumn = ColumnNames.PhysicalCount;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Month);
            p.SourceColumn = ColumnNames.Month;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Year);
            p.SourceColumn = ColumnNames.Year;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AMC);
            p.SourceColumn = ColumnNames.AMC;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SOHCost);
            p.SourceColumn = ColumnNames.SOHCost;
            p.SourceVersion = DataRowVersion.Current;


            p = cmd.Parameters.Add(Parameters.UnitID);
            p.SourceColumn = ColumnNames.UnitID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
